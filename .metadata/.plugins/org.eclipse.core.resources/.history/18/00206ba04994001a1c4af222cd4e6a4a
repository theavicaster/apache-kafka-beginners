package tutorial2;

import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.Lists;
import com.twitter.hbc.ClientBuilder;
import com.twitter.hbc.core.Client;
import com.twitter.hbc.core.Constants;
import com.twitter.hbc.core.Hosts;
import com.twitter.hbc.core.HttpHosts;
import com.twitter.hbc.core.endpoint.StatusesFilterEndpoint;
import com.twitter.hbc.core.processor.StringDelimitedProcessor;
import com.twitter.hbc.httpclient.auth.Authentication;
import com.twitter.hbc.httpclient.auth.OAuth1;

public class TwitterProducer {
	
	Logger logger = LoggerFactory.getLogger(TwitterProducer.class.getName());
	
	String consumerKey = "Cc7Wolu13LoOhWY8ZVx5BGLAi";
	String consumerSecret = "Sq6UtnuymOf5KWuV6WxDE9WB2Cimp4EPKhOI9xBJK7OhESKKSW";
	String token = "1259513859116806146-nqmhm2Ok2v0LqxfTsUg4GVfxxer59W";
	String secret = "AKLdovK9OVXtnmqCuedXZ9EHhx9HDd4IdDRF0JRDNWZKs";
	
	
	public TwitterProducer() {}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new TwitterProducer().run();
	}
	
	public void run() {
		
		logger.info("Setup!");
		
		/** Set up your blocking queues: Be sure to size these properly based on expected TPS of your stream */
		BlockingQueue<String> msgQueue = new LinkedBlockingQueue<String>(1000);
		
		//Create a Twitter client
		Client client = createTwitterClient(msgQueue);
		
		//Attempts to establish connection
		client.connect();
		
		
		//Loop to send tweets to Kafka
		
		// on a different thread, or multiple different threads....
		while (!client.isDone()) {
			  String msg = null;
			try {
				msg = msgQueue.poll(5,TimeUnit.SECONDS);
			} catch (InterruptedException e) {
				e.printStackTrace();
				client.stop();
			}
			if(msg != null) {
				logger.info(msg);
			}
		}
		logger.info("End of application!");
		
	}
	
	public Client createTwitterClient(BlockingQueue<String> msgQueue) {
				
		/** Declare the host you want to connect to, the endpoint, and authentication (basic auth or oauth) */
		Hosts hosebirdHosts = new HttpHosts(Constants.STREAM_HOST);
		StatusesFilterEndpoint hosebirdEndpoint = new StatusesFilterEndpoint();

		List<String> terms = Lists.newArrayList("bitcoin");
		hosebirdEndpoint.trackTerms(terms);

		// These secrets should be read from a config file
		Authentication hosebirdAuth = new OAuth1(consumerKey, consumerSecret, token, secret);
		
		
		
		ClientBuilder builder = new ClientBuilder()
				  .name("Hosebird-Client-01")                              // optional: mainly for the logs
				  .hosts(hosebirdHosts)
				  .authentication(hosebirdAuth)
				  .endpoint(hosebirdEndpoint)
				  .processor(new StringDelimitedProcessor(msgQueue));

				Client hosebirdClient = builder.build();
				
				return hosebirdClient;
				
	}

}
